Архитектура
===========

Общая архитектура
--------------

Кодинг-платформа построена по модульному принципу с использованием Flask-фреймворка. Основные компоненты:

1. **Web-интерфейс**: Flask с шаблонной системой Jinja2 для формирования веб-страниц
2. **База данных**: SQLite для хранения данных о пользователях, задачах и решениях
3. **Система проверки решений**: Модуль для запуска кода пользователя и проверки результатов
4. **Анализатор ошибок**: Интеграция с OpenAI API для анализа ошибок в коде пользователя

Структура проекта
--------------

.. code-block:: text

    coding-platform/
    ├── app.py              # Основной файл приложения с маршрутами и логикой
    ├── utils.py            # Утилиты для работы с кодом и тестами
    ├── ai_helper.py        # Модуль для анализа ошибок с помощью LLM
    ├── decorators.py       # Декораторы для проверки прав доступа
    ├── init_db.py          # Скрипт для инициализации базы данных с примерами
    ├── schema.sql          # Схема базы данных
    ├── requirements.txt    # Зависимости проекта
    ├── .env                # Конфигурационные переменные
    └── templates/          # Шаблоны страниц для веб-интерфейса

Компоненты
--------

Web-интерфейс
~~~~~~~~~~~

Web-интерфейс построен на Flask с использованием шаблонной системы Jinja2. Основные маршруты:

* `/` - Главная страница со списком задач
* `/problem/<id>` - Страница конкретной задачи с редактором кода
* `/my_solutions` - История решений пользователя
* `/login` - Авторизация
* `/register` - Регистрация
* `/add_problem` - Добавление новой задачи (для учителей и администраторов)
* `/edit_problem/<id>` - Редактирование задачи (для учителей и администраторов)
* `/admin/initialize_samples` - Инициализация примеров задач (для администраторов)

База данных
~~~~~~~~~

Проект использует SQLite напрямую через стандартную библиотеку `sqlite3`. Схема базы данных включает:

* Таблицу пользователей (`users`)
* Таблицу задач (`problems`)
* Таблицу решений (`solutions`)

Система проверки решений
~~~~~~~~~~~~~~~~~~~~~

Система проверки решений:

1. Получает код пользователя и тестовые случаи для задачи
2. Создает временный файл с кодом
3. Запускает код на каждом тестовом случае
4. Сравнивает результаты с ожидаемыми
5. Возвращает статус прохождения тестов и сообщения об ошибках

Анализатор ошибок
~~~~~~~~~~~~~~

Анализатор ошибок использует интеграцию с OpenAI API:

1. При возникновении ошибки определяет её тип
2. Для синтаксических ошибок предоставляет базовый анализ без использования LLM
3. Для других типов ошибок отправляет запрос к OpenAI API с кодом, ошибкой и тестовыми случаями
4. Обрабатывает ответ от LLM и предоставляет структурированные рекомендации пользователю

Примеры взаимодействия
------------------

1. **Решение задачи**:
   
   * Пользователь открывает страницу задачи
   * Вводит решение в редакторе кода
   * Отправляет решение на проверку
   * Система запускает проверку на тестовых случаях
   * Пользователь получает результат с анализом ошибок при их наличии

2. **Создание задачи**:
   
   * Учитель открывает страницу добавления задачи
   * Заполняет форму с описанием, входными и выходными данными
   * Добавляет тестовые случаи
   * Задача сохраняется в базе данных и становится доступной для решения 